# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables: 
  triggeredBy: 'commit on main branch'
  # --- GCP parameters ---
  projectId: asteria-dev-398f5
  region: europe-west8
  # Artifact Registry repository
  repositoryId: pickit

  # Service Account JSON in Library > Secure files
  secureFile: 'asteria-dev-398f5-27c309172a94.json'
  artifactRegistryDomain: '$(region)-docker.pkg.dev'
  # [REGION]-docker.pkg.dev/[PROJECT]/[REPOSITORY]/[IMAGE]
  imageName: '$(artifactRegistryDomain)/$(projectId)/$(repositoryId)/test-app-react-js-pipeline'
  # Cloud Run service name
  cloudRunService: 'test-app-react-js-pipeline'
  # Exposed container port (defined in Dockerfile)
  containerPort: '80'
  # Cloud Run flags
  cloudRunFlags: '--allow-unauthenticated --ingress=all'
  imageTag: '$(Build.BuildId)'
  appVersion: ''

parameters:
  - name: skipTests
    type: boolean
    default: 'false'

  - name: skipValidations
    type: boolean
    default: 'false'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Tests
    jobs:
      # - job: Setup
      #   displayName: 'Setup job'
      #   steps:
      #     - task: NodeTool@0
      #       inputs:
      #         versionSpec: '22.x'
      #       displayName: 'Install Node.js'

      #     - task: Cache@2
      #       inputs:
      #         key: 'npm | "$(Agent.OS)" | package-lock.json'
      #         restoreKeys: |
      #           npm | "$(Agent.OS)"
      #         path: $(HOME)/.npm
      #       displayName: 'Cache npm packages'

      #     - script: |
      #         npm ci --prefer-offline --no-audit --fund=false
      #       displayName: 'Install dependencies'


      - job: Validations
        # dependsOn: Setup
        condition: ne('${{ parameters.skipValidations }}', 'true')
        displayName: 'Esecuzione delle validazioni del codice'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '22.x'
            displayName: 'Install Node.js 22.x'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(HOME)/.npm
            displayName: 'Cache npm packages'

          - script: |
              npm ci --prefer-offline --no-audit --fund=false
            displayName: 'Install dependencies'

          - script: |
              npm run lint
            displayName: 'Run ESLint'

          - script: |
              npm run prettier
            displayName: 'Run Prettier'

          # - script: |
          #     npm run test:coverage
          #   displayName: 'Run tests'

          - script: |
              npm run build
            displayName: 'Create production build'

          - script:  |
              npm run test:e2e:chrome
            displayName: 'Run E2E tests in Chrome'
            env:
              CYPRESS_VIDEOS_FOLDER: $(Build.SourcesDirectory)/cypress/videos/chrome
              CYPRESS_SCREENSHOTS_FOLDER: $(Build.SourcesDirectory)/cypress/screenshots/chrome

          # - script:  |
          #     npm run test:e2e:edge
          #   displayName: 'Run E2E tests in Edge'
          #   env:
          #     CYPRESS_VIDEOS_FOLDER: $(Build.SourcesDirectory)/cypress/videos/edge
          #     CYPRESS_SCREENSHOTS_FOLDER: $(Build.SourcesDirectory)/cypress/screenshots/edge

          # - script:  |
          #     npm run test:e2e:firefox
          #   displayName: 'Run E2E tests in Firefox'
          #   env:
          #     CYPRESS_VIDEOS_FOLDER: $(Build.SourcesDirectory)/cypress/videos/firefox
          #     CYPRESS_SCREENSHOTS_FOLDER: $(Build.SourcesDirectory)/cypress/screenshots/firefox

          # - script: |
          #     set -euxo pipefail
          #     mkdir -p "$(Build.ArtifactStagingDirectory)/cypress"
          #     if [ -d "cypress/screenshots" ]; then
          #       cp -R cypress/screenshots "$(Build.ArtifactStagingDirectory)/cypress/"
          #     fi
          #     if [ -d "cypress/videos" ]; then
          #       cp -R cypress/videos "$(Build.ArtifactStagingDirectory)/cypress/"
          #     fi
          #     echo "Contenuto artifact:"
          #     find "$(Build.ArtifactStagingDirectory)/cypress" -maxdepth 3 -type f || true
          #   displayName: 'Collect Cypress screenshots & videos'
          #   condition: always()

          # - task: PublishPipelineArtifact@1
          #   displayName: 'Publish Cypress artifacts'
          #   inputs:
          #     targetPath: '$(Build.ArtifactStagingDirectory)/cypress'
          #     artifact: 'cypress-artifacts'
          #     publishLocation: 'pipeline'
          #   condition: always()

          # - task: PublishCodeCoverageResults@2
          #   inputs:
          #     summaryFileLocation: 'coverage/cobertura-coverage.xml'
          #     failIfCoverageEmpty: true

      # - job: RunTest
      #   dependsOn: Setup
      #   # dependsOn: []
      #   condition: ne('${{ parameters.skipTests }}', 'true')
      #   displayName: 'Run test in ubuntu-latest env'
      #   steps:
      #     - task: NodeTool@0
      #       inputs:
      #         versionSpec: '22.x'
      #       displayName: 'Install Node.js 22.x'

      #     - task: Cache@2
      #       inputs:
      #         key: 'npm | "$(Agent.OS)" | package-lock.json'
      #         restoreKeys: |
      #           npm | "$(Agent.OS)"
      #         path: $(HOME)/.npm
      #       displayName: 'Cache npm packages'

      #     - script: |
      #         npm ci --prefer-offline --no-audit --fund=false
      #       displayName: 'Install dependencies'

      #     - script: |
      #         npm test
      #       displayName: 'Run tests'

  - stage: Build
    jobs:
      - job: runBuild
        steps:
        - task: DownloadSecureFile@1
          name: gcpKey
          inputs:
            secureFile: $(secureFile)
          displayName: 'Download secure file - GCP Service Account Key'
      
        - script: |
            set -e
            echo "Authenticating to Google Cloud..."
            gcloud auth activate-service-account --key-file=$(gcpKey.secureFilePath)
            gcloud config set project $(projectId)
            gcloud auth configure-docker $(artifactRegistryDomain) --quiet
          displayName: 'Gcloud auth & configure-docker'

        - task: Docker@2
          displayName: 'Docker build'
          inputs:
            command: build
            repository: $(imageName)
            Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
            buildContext: '$(Build.SourcesDirectory)'
            tags: |
              $(imageTag)
              $(appVersion)
              latest

        - task: Docker@2
          displayName: 'Docker push'
          inputs:
            command: push
            repository: $(imageName)
            tags: |
              $(imageTag)
              $(appVersion)
              latest

  - stage: Deploy
    jobs:
      - job: runDeploy
        displayName: 'Run deploy in ubuntu-latest env'
        steps:
        - task: DownloadSecureFile@1
          name: gcpKey
          inputs:
            secureFile: $(secureFile)
          displayName: 'Download secure file - GCP Service Account Key'
      
        - script: |
            set -e
            echo "Authenticating to Google Cloud..."
            gcloud auth activate-service-account --key-file=$(gcpKey.secureFilePath)
            gcloud config set project $(projectId)
            gcloud auth configure-docker $(artifactRegistryDomain) --quiet
          displayName: 'Gcloud auth & configure-docker'

        - script: |
            set -e
            IMG="$(imageName):latest"
            echo "Deploying ${IMG}"

            gcloud run deploy $(cloudRunService) \
              --image="${IMG}" \
              --region="$(region)" \
              --project="$(projectId)" \
              --platform=managed \
              --port="$(containerPort)" \
              --max-instances=1 \
              --memory=128Mi \
              $(cloudRunFlags) \
              --quiet

            echo "Service URL:"
            gcloud run services describe $(cloudRunService) \
              --region="$(region)" \
              --project="$(projectId)" \
              --format="value(status.url)"
          displayName: 'Deploy su Cloud Run'


